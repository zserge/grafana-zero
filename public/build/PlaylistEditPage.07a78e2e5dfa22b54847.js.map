{"version":3,"file":"PlaylistEditPage.07a78e2e5dfa22b54847.js","mappings":"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","sources":["webpack://grafana/./public/app/features/playlist/PlaylistEditPage.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRow.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/core/components/editors/DashboardPickerByID.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/api.ts","webpack://grafana/./public/app/features/playlist/styles.ts","webpack://grafana/./public/app/features/playlist/usePlaylist.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PlaylistForm } from './PlaylistForm';\nimport { updatePlaylist } from './api';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\nimport { getPlaylistStyles } from './styles';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\nexport interface RouteParams {\n  id: number;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps<RouteParams> {}\n\nexport const PlaylistEditPage: FC<Props> = ({ navModel, match }) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist(match.params.id);\n  const onSubmit = async (playlist: Playlist) => {\n    await updatePlaylist(match.params.id, playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>Edit playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistEditPage);\n","import React, { FC, MouseEvent } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Icon, IconButton, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\nimport { PlaylistItem } from './types';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface PlaylistTableRowProps {\n  first: boolean;\n  last: boolean;\n  item: PlaylistItem;\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRow: FC<PlaylistTableRowProps> = ({ item, onDelete, onMoveDown, onMoveUp, first, last }) => {\n  const styles = useStyles(getStyles);\n  const onDeleteClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onDelete(item);\n  };\n  const onMoveDownClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveDown(item);\n  };\n  const onMoveUpClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveUp(item);\n  };\n\n  return (\n    <tr aria-label={selectors.pages.PlaylistForm.itemRow} key={item.title}>\n      {item.type === 'dashboard_by_id' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"apps\" aria-label={selectors.pages.PlaylistForm.itemIdType} />\n          <span>{item.title}</span>\n        </td>\n      ) : null}\n      {item.type === 'dashboard_by_tag' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"tag-alt\" aria-label={selectors.pages.PlaylistForm.itemTagType} />\n          <TagBadge key={item.id} label={item.title} removeIcon={false} count={0} />\n        </td>\n      ) : null}\n      <td className={cx(styles.td, styles.settings)}>\n        {!first ? (\n          <IconButton\n            name=\"arrow-up\"\n            size=\"md\"\n            onClick={onMoveUpClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveUp}\n            type=\"button\"\n          />\n        ) : null}\n        {!last ? (\n          <IconButton\n            name=\"arrow-down\"\n            size=\"md\"\n            onClick={onMoveDownClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveDown}\n            type=\"button\"\n          />\n        ) : null}\n        <IconButton\n          name=\"times\"\n          size=\"md\"\n          onClick={onDeleteClick}\n          aria-label={selectors.pages.PlaylistForm.itemDelete}\n          type=\"button\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    td: css`\n      label: td;\n      line-height: 28px;\n      max-width: 335px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    item: css`\n      label: item;\n      span {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRow } from './PlaylistTableRow';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowsProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRows: FC<PlaylistTableRowsProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  if (items.length === 0) {\n    return (\n      <tr>\n        <td>\n          <em>Playlist is empty. Add dashboards below.</em>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const first = index === 0;\n        const last = index === items.length - 1;\n        return (\n          <PlaylistTableRow\n            first={first}\n            last={last}\n            item={item}\n            onDelete={onDelete}\n            onMoveDown={onMoveDown}\n            onMoveUp={onMoveUp}\n            key={item.title}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTable: FC<PlaylistTableProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <table className=\"filter-table\">\n        <tbody>\n          <PlaylistTableRows items={items} onMoveUp={onMoveUp} onMoveDown={onMoveDown} onDelete={onDelete} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport debounce from 'debounce-promise';\nimport { AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { SelectableValue } from '@grafana/data';\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport interface DashboardPickerItem {\n  id: number;\n  uid: string;\n  label: string;\n}\n\ninterface Props {\n  onChange: (dashboard?: DashboardPickerItem) => void;\n  value?: DashboardPickerItem;\n  width?: number;\n  isClearable?: boolean;\n  invalid?: boolean;\n  disabled?: boolean;\n  id?: string;\n}\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport const DashboardPickerByID: FC<Props> = ({\n  onChange: propsOnChange,\n  value,\n  width,\n  isClearable = false,\n  invalid,\n  disabled,\n  id,\n}) => {\n  const debouncedSearch = debounce(getDashboards, 300);\n  const option = value ? { value, label: value.label } : undefined;\n  const onChange = (item: SelectableValue<DashboardPickerItem>) => {\n    propsOnChange(item?.value);\n  };\n\n  return (\n    <AsyncSelect\n      inputId={id}\n      menuShouldPortal\n      width={width}\n      isClearable={isClearable}\n      defaultOptions={true}\n      loadOptions={debouncedSearch}\n      onChange={onChange}\n      placeholder=\"Select dashboard\"\n      noOptionsMessage=\"No dashboards found\"\n      value={option}\n      invalid={invalid}\n      disabled={disabled}\n    />\n  );\n};\n\nasync function getDashboards(query = ''): Promise<Array<SelectableValue<DashboardPickerItem>>> {\n  const result = await backendSrv.search({ type: 'dash-db', query, limit: 100 });\n  return result.map(({ id, uid = '', title, folderTitle }) => {\n    const value: DashboardPickerItem = {\n      id,\n      uid,\n      label: `${folderTitle ?? 'General'}/${title}`,\n    };\n\n    return { value, label: value.label };\n  });\n}\n","import React, { FC } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { Playlist } from './types';\nimport { TagFilter } from '../../core/components/TagFilter/TagFilter';\nimport { SearchSrv } from '../../core/services/search_srv';\nimport { usePlaylistItems } from './usePlaylistItems';\nimport { PlaylistTable } from './PlaylistTable';\nimport { DashboardPickerByID } from 'app/core/components/editors/DashboardPickerByID';\n\ninterface PlaylistFormProps {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nconst searchSrv = new SearchSrv();\n\nexport const PlaylistForm: FC<PlaylistFormProps> = ({ onSubmit, playlist }) => {\n  const { name, interval, items: propItems } = playlist;\n  const { items, addById, addByTag, deleteItem, moveDown, moveUp } = usePlaylistItems(propItems);\n  return (\n    <>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} onMoveUp={moveUp} onMoveDown={moveDown} onDelete={deleteItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPickerByID onChange={addById} id=\"dashboard-picker\" isClearable />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={searchSrv.getDashboardTags}\n                    onChange={addByTag}\n                    placeholder={''}\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </>\n  );\n};\n","import { DashboardPickerItem } from 'app/core/components/editors/DashboardPickerByID';\nimport { useCallback, useState } from 'react';\n\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  const addById = useCallback(\n    (dashboard?: DashboardPickerItem) => {\n      if (!dashboard || items.find((item) => item.id === dashboard.id)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        id: dashboard.id,\n        title: dashboard.label,\n        type: 'dashboard_by_id',\n        value: dashboard.id.toString(10),\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        title: tag,\n        type: 'dashboard_by_tag',\n        value: tag,\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const movePlaylistItem = useCallback(\n    (item: PlaylistItem, offset: number) => {\n      const newItems = [...items];\n      const currentPosition = newItems.indexOf(item);\n      const newPosition = currentPosition + offset;\n\n      if (newPosition >= 0 && newPosition < newItems.length) {\n        newItems.splice(currentPosition, 1);\n        newItems.splice(newPosition, 0, item);\n      }\n      setItems(newItems);\n    },\n    [items]\n  );\n\n  const moveUp = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, -1);\n    },\n    [movePlaylistItem]\n  );\n\n  const moveDown = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, 1);\n    },\n    [movePlaylistItem]\n  );\n\n  const deleteItem = useCallback(\n    (item: PlaylistItem) => {\n      setItems(items.filter((i) => i !== item));\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveDown, moveUp };\n}\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist, PlaylistDTO } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function deletePlaylist(id: number) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${id}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function getPlaylistStyles(theme: GrafanaTheme2) {\n  return {\n    description: css`\n      label: description;\n      width: 555px;\n      margin-bottom: 20px;\n    `,\n    subHeading: css`\n      label: sub-heading;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Playlist } from './types';\nimport { getPlaylist } from './api';\n\nexport function usePlaylist(playlistId?: number) {\n  const [playlist, setPlaylist] = useState<Playlist>({ items: [], interval: '5m', name: '' });\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initPlaylist = async () => {\n      if (!playlistId) {\n        setLoading(false);\n        return;\n      }\n      const list = await getPlaylist(playlistId);\n      setPlaylist(list);\n      setLoading(false);\n    };\n    initPlaylist();\n  }, [playlistId]);\n\n  return { playlist, loading };\n}\n"],"names":["PlaylistEditPage","navModel","match","styles","useStyles2","getPlaylistStyles","playlist","loading","usePlaylist","params","id","isLoading","className","subHeading","description","onSubmit","async","updatePlaylist","locationService","connect","state","getNavModel","navIndex","PlaylistTableRow","item","onDelete","onMoveDown","onMoveUp","first","last","useStyles","getStyles","selectors","type","cx","td","Icon","name","title","TagBadge","label","removeIcon","count","settings","IconButton","size","onClick","event","preventDefault","theme","css","spacing","xs","PlaylistTableRows","items","length","map","index","PlaylistTable","DashboardPickerByID","onChange","propsOnChange","value","width","isClearable","invalid","disabled","debouncedSearch","debounce","getDashboards","option","undefined","AsyncSelect","inputId","menuShouldPortal","defaultOptions","loadOptions","placeholder","noOptionsMessage","query","result","backendSrv","limit","uid","folderTitle","searchSrv","SearchSrv","PlaylistForm","interval","propItems","addById","addByTag","deleteItem","moveDown","moveUp","playlistItems","setItems","useState","useCallback","dashboard","find","newItem","toString","order","tags","tag","movePlaylistItem","offset","newItems","currentPosition","indexOf","newPosition","splice","filter","i","usePlaylistItems","Form","list","validateOn","register","errors","isDisabled","Object","keys","Field","error","message","Input","required","defaultValue","TagFilter","hideValues","tagOptions","getDashboardTags","HorizontalGroup","Button","variant","LinkButton","href","config","createPlaylist","withErrorHandling","getBackendSrv","post","put","deletePlaylist","delete","getPlaylist","get","getAllPlaylist","apiCall","dispatch","notifyApp","createSuccessNotification","e","createErrorNotification","playlistId","setPlaylist","setLoading","useEffect","initPlaylist"],"sourceRoot":""}