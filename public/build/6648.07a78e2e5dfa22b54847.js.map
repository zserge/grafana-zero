{"version":3,"file":"6648.07a78e2e5dfa22b54847.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/state/buildCategories.ts","webpack://grafana/./public/app/features/datasources/state/actions.ts","webpack://grafana/./public/app/features/datasources/state/navModel.ts","webpack://grafana/./public/app/features/datasources/state/selectors.ts","webpack://grafana/./public/app/features/plugins/pluginSettings.ts"],"sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-honeycomb-datasource',\n      description: 'Honeycomb integration and datasource',\n      name: 'Honeycomb',\n      imgUrl: 'public/img/plugins/honeycomb.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-salesforce-datasource',\n      description: 'Salesforce integration and datasource',\n      name: 'Salesforce',\n      imgUrl: 'public/img/plugins/salesforce.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-jira-datasource',\n      description: 'Jira integration and datasource',\n      name: 'Jira',\n      imgUrl: 'public/img/plugins/jira_logo.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-gitlab-datasource',\n      description: 'GitLab integration and datasource',\n      name: 'GitLab',\n      imgUrl: 'public/img/plugins/gitlab.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-splunk-monitoring-datasource',\n      description: 'SignalFx integration and datasource',\n      name: 'Splunk Infrastructure Monitoring',\n      imgUrl: 'public/img/plugins/signalfx-logo.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { lastValueFrom } from 'rxjs';\nimport { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport config from '../../../core/config';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  loadDataSourceMeta: typeof loadDataSourceMeta;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    loadDataSourceMeta,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!pageId) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      const loadedDataSource = await dispatch(dependencies.loadDataSource(pageId));\n      await dispatch(dependencies.loadDataSourceMeta(loadedDataSource));\n\n      // have we already loaded the plugin then we can skip the steps below?\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        const { statusText, message: errMessage, details, data } = err;\n\n        const message = errMessage || data?.message || 'HTTP error ' + statusText;\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<Promise<DataSourceSettings>> {\n  return async (dispatch) => {\n    const dataSource = await getDataSourceUsingUidOrId(uid);\n\n    dispatch(dataSourceLoaded(dataSource));\n    return dataSource;\n  };\n}\n\nexport function loadDataSourceMeta(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: pluginInfo.backend || isBackend,\n    };\n\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\n/**\n * Get data source by uid or id, if old id detected handles redirect\n */\nexport async function getDataSourceUsingUidOrId(uid: string | number): Promise<DataSourceSettings> {\n  // Try first with uid api\n  try {\n    const byUid = await lastValueFrom(\n      getBackendSrv().fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/uid/${uid}`,\n        showErrorAlert: false,\n      })\n    );\n\n    if (byUid.ok) {\n      return byUid.data;\n    }\n  } catch (err) {\n    console.log('Failed to lookup data source by uid', err);\n  }\n\n  // try lookup by old db id\n  const id = typeof uid === 'string' ? parseInt(uid, 10) : uid;\n  if (!Number.isNaN(id)) {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<DataSourceSettings>({\n        method: 'GET',\n        url: `/api/datasources/${id}`,\n        showErrorAlert: false,\n      })\n    );\n\n    // If the uid is a number, then this is a refresh on one of the settings tabs\n    // and we can return the response data\n    if (response.ok && typeof uid === 'number' && response.data.id === uid) {\n      return response.data;\n    }\n\n    // Not ideal to do a full page reload here but so tricky to handle this\n    // otherwise We can update the location using react router, but need to\n    // fully reload the route as the nav model page index is not matching with\n    // the url in that case. And react router has no way to unmount remount a\n    // route\n    if (response.ok && response.data.id.toString() === uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${response.data.uid}`);\n      return {} as DataSourceSettings; // avoids flashing an error\n    }\n  }\n\n  throw Error('Could not find data source');\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    await updateFrontendSettings();\n    locationService.push(`/datasources/edit/${result.datasource.uid}`);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource); // by UID not yet supported\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n\n    locationService.push('/datasources');\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init(config.datasources, settings.defaultDatasource);\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    if (contextSrv.hasPermission(AccessControlAction.DataSourcesPermissionsRead)) {\n      navModel.children!.push({\n        active: false,\n        icon: 'lock',\n        id: `datasource-permissions-${dataSource.id}`,\n        text: 'Permissions',\n        url: `datasources/edit/${dataSource.id}/permissions`,\n      });\n    }\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'database',\n      id: `datasource-cache-${dataSource.uid}`,\n      text: 'Cache',\n      url: `datasources/edit/${dataSource.uid}/cache`,\n      hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeName: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import { getBackendSrv } from '@grafana/runtime';\nimport { PluginMeta } from '@grafana/data';\n\ntype PluginCache = {\n  [key: string]: PluginMeta;\n};\n\nconst pluginInfoCache: PluginCache = {};\n\nexport function getPluginSettings(pluginId: string): Promise<PluginMeta> {\n  const v = pluginInfoCache[pluginId];\n  if (v) {\n    return Promise.resolve(v);\n  }\n  return getBackendSrv()\n    .get(`/api/plugins/${pluginId}/settings`)\n    .then((settings: any) => {\n      pluginInfoCache[pluginId] = settings;\n      return settings;\n    })\n    .catch((err: any) => {\n      return Promise.reject(new Error('Unknown Plugin'));\n    });\n}\n"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","edition","hasValidLicense","config","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","link","push","type","PluginType","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","loadDataSourceMeta","getDataSource","getDataSourceMeta","importDataSourcePlugin","async","dispatch","getState","loadedDataSource","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","err","initDataSourceSettingsFailed","Error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","statusText","message","errMessage","details","data","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","uid","byUid","lastValueFrom","fetch","method","showErrorAlert","ok","console","log","parseInt","Number","isNaN","toString","window","location","href","locationUtil","getDataSourceUsingUidOrId","dataSourceLoaded","pluginInfo","getPluginSettings","isBackend","DataSourceClass","prototype","DataSourceWithBackend","meta","backend","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","nameHasSuffix","getNewName","incrementLastDigit","getLastDigit","findNewName","post","updateFrontendSettings","locationService","datasource","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","deleteDataSource","delete","toLowerCase","then","settings","datasources","defaultDatasource","init","endsWith","slice","digit","pluginMeta","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","contextSrv","AccessControlAction","hideFromTabs","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeName","typeLogoUrl","user","secureJsonFields","getDataSources","state","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","pluginInfoCache","pluginId","v","Promise","resolve","catch","reject"],"sourceRoot":""}